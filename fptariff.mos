model fptariff
uses "mmxprs"


! Setting up all of the variables to be used and the 24 hours (as well as an initilization period).
declarations
	NHours = 24
	Hours = 0..NHours
	HourNames: array(Hours) of string
	Demand: array(Hours) of real
	SpotPrice: array(Hours) of real
	SolarProduction: array(Hours) of real
	BatterySize: real
	BatteryInitial: real
	BatteryChargeRate: real
	FeedInTariff: real
	RetailPrice: real
	Buy: array(Hours) of mpvar
	Sell: array(Hours) of mpvar
	Batc: array(Hours) of mpvar
	Batd: array(Hours) of mpvar
	StoredElectricity: array(Hours) of mpvar
end-declarations

initializations from "fptariff.dat" ! Importing data, changing this file will change the data used
	HourNames Demand SpotPrice SolarProduction BatteryInitial BatterySize FeedInTariff RetailPrice
end-initializations

!Equations for prosumer and retailer profit
TotalProfit := sum(h in Hours) (FeedInTariff*Sell(h) - RetailPrice*Buy(h))
RetailProfit := sum(h in Hours) (RetailPrice*Buy(h) - Buy(h)*SpotPrice(h))

!Balance, PV and battery constriants
forall(h in Hours) do
	DemandCS(h) := Buy(h) + SolarProduction(h) + Batd(h) - Batc(h) - Sell(h) = Demand(h)
	SellCS(h) := Sell(h) <= SolarProduction(h)
	ChargingCS := Batc(h) <= BatteryChargeRate
	DischargingCS := Batd(h) <= BatteryChargeRate
	BatteryCS := BatteryInitial <= StoredElectricity(h)
	BatteryCS2 := StoredElectricity(h) <= BatterySize
	BatteryCS3 := BatteryInitial <= StoredElectricity(h) - Batd(h) + Batc(h)
	BatteryCS4 := StoredElectricity(h) - Batd(h) + Batc(h) <= BatterySize
end-do

!Battery balance between periods, with an initialization period at 0
forall (h in Hours) do
	if (h>0) then
		StoredElectricity(h) = StoredElectricity(h-1) + Batc(h-1) - Batd(h-1)
	else
		StoredElectricity(h) = 0
	end-if
end-do

!maximising the prosumer profit
maximize(TotalProfit)

!uncomment these lines in order to print specific values over time as needed

!forall (h in Hours) do
	!write(HourNames(h), ": ")
	!write("Buy:", strfmt(getsol(Buy(h)), 3), "kWh", "   ")
	!write("Sell:", strfmt(getsol(Sell(h)), 3), "kWh", "   ")
	!write("Stored: ",strfmt(getsol(StoredElectricity(h)), 3), "kWh")
	!write("Charging: ", strfmt(getsol(Batc(h)), 3), "kWh")
	!write("Discharging: ", strfmt(getsol(Batd(h)), 3), "kWh")
	!write("Stored Electricity: ", strfmt(getsol(StoredElectricity(h)), 3), "kWh")
	!writeln
!end-do

writeln("Total Profit =", getsol(TotalProfit), "p") !print solutions
writeln("Retailer Profit =", getsol(RetailProfit), "p")

end-model
